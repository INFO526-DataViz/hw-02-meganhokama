---
title: "HW 02"
author: "Megan Hokama"
format: 
  html:
    embed-resources: true
toc: true
---
```{r}
#| label: Set up environment
# Load and install necessary libraries

if(!require(pacman))
  install.packages("pacman")

pacman::p_load(tidyverse,
               ggridges,
               dsbox,
               dplyr,
               janitor)
pacman::p_load_gh("rstudio-education/dsbox")
library(RColorBrewer)

# set theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))

# set width of code output
options(width = 65)

# set figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 7, # 7" width
  fig.asp = 0.618, # the golden ratio
  fig.retina = 3, # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 300 # higher dpi, sharper image
)


```


## 1 - A new day, a new plot, a new geom

```{r}
#| label: Create ridgeline plot with Airbnb ratings and Edinburgh neighborhoods

#load data and use glimpse to overview the data
edibnb |>
  glimpse()     

# Remove rows with NA values
edibnb <- na.omit(edibnb)

#Calculate the median review and order
median_scores <- edibnb %>%
  group_by(neighbourhood) %>%
  summarize(median_score = median(review_scores_rating)) %>%
  arrange(desc(median_score))

# Reorder the neighborhoods based on median scores
edibnb$neighbourhood <- factor(edibnb$neighbourhood, levels = median_scores$neighbourhood)

#create ridgeplot referencing https://wilkelab.org/ggridges/
ggplot(edibnb, aes(x = review_scores_rating, y = neighbourhood, fill = neighbourhood)) +
  geom_density_ridges() + 
  scale_fill_brewer(palette = "Paired") +
  labs(title = "Airbnb Review Scores in Edinburgh Neighborhoods",
       subtitle = "Neighbourhoods Ordered by Median Review Scores",
       x = "Review Score",
       y = "Neighbourhood") +
  theme_minimal() +
  guides(fill = "none") +
  coord_cartesian(xlim = c(70, 100)) # Set x-axis limits from 70 to 100 so that the ridge plots can be zoomed in more. 



```
Joint Bandwidth = 1.22
Interpretation: In this ridgeplot, we are able to see the Airbnb review scores in Edinburgh Neighborhood. The vertical position of the ridges on the y-axis indicates the ordering of neighborhoods by their median review scores. Neighborhoods at the top have higher median review scores, while those at the bottom have lower median review scores.The width and shape of each ridge represent the density of review scores in that neighborhood. Wider ridges indicate higher density of review scores in a particular range, while narrower ridges indicate lower density.

## 2 - Foreign Connected PACs

```{r}
#| label: UK contributions and political parties

#Load packages again
pacman::p_load(tidyverse, 
               openintro, 
               ggplot2, 
               here, 
               devtools, 
               dsbox, 
               ggridges, 
               dplyr, 
               fs, 
               janitor, 
               tidyr)

# get a list of files with "Foreign Connected PAC" in their names
list_of_files <- dir_ls(path = "data", regexp = "Foreign Connected PAC")

# read all files and row bind them
# keeping track of the file name in a new column called year
pac <- read_csv(list_of_files, id = "year", show_col_types = F)

#clean data
pac <- pac %>%
  clean_names()

pac|>
  glimpse() #Making sure to look at the data variables for next portion

# Dropping the column "total"
pac <- within(pac, rm(total))

#extracting year
pac$year<-substr(pac$year,nchar(pac$year)-8+1,nchar(pac$year)-4)
pac$year=as.integer(pac$year)

# Removing the $ symbol and converting dems and repubs to numeric.
pac <- pac %>%
  mutate(dems = as.numeric(gsub("\\$", "", dems))) %>%
  mutate(repubs = as.numeric(gsub("\\$", "", repubs)))

#Then, pivot the data longer such that instead of dems and repubs columns you have a column called party with levels: Democrat and Republican and another column called amount that contains the amount of contribution.

pac_long <- pac %>%
  pivot_longer( #pivot columns into a longer format
    cols = c(dems, repubs),
    names_to = "party",  #Name the new column to "party"
    values_to = "amount" #Name of the column with contribution amount
  ) 

# Display the first few rows of the pivoted data to check if columns were created
head(pac_long)

#splitting into country of origin and parent company
pac_long<- pac_long|>
  separate(
    col = "country_of_origin_parent_company",
    into=c("country_of_origin","parent_company"),
sep="/",convert=T)

# Filter the data for PACs with country_of_origin as UK
uk_contributions <- pac_long %>%
  filter(country_of_origin == "UK")

# Group by year, party, and sum the contributions/HAVING TROUBLE!
summary_table_uk <- uk_contributions %>%
  group_by(year, party) %>% 
  summarise(total_amount = sum(amount), .groups = 'drop')

```

``` {r Plotting of UK connected PACs}
ggplot(summary_table_uk, aes(x = year, y = total_amount)) +
  geom_line(aes(color = party), linewidth = 1.2) +
  theme_minimal() +
  labs(
    x = "Year", y = "Total amount",  linetype = NULL,
    color = "Party",
    title = "Contibutions to US political parties from UK-connected PACs",
    caption = "Source: OpenSecrets.org"
  ) +
  scale_color_manual(
    values = c("blue", "red"),
    labels = c("Democrat", "Republican")
  ) +
  coord_cartesian(clip = "off") +
  theme(
    legend.position = c(0.9, 0.15),
    axis.title.x = element_text(hjust = 0),
    axis.title.y = element_text(hjust = 0)
  ) +
  scale_y_continuous(
    labels = scales::dollar_format(scale = 1e-6, prefix = "$", suffix = "M"),
  ) 
```
```{r}
#|label: Use France to create a new graph, still having difficulty so I'll be sure to go to office hours
# Filter the data for PACs with country_of_origin as UK
france_contributions <- pac_long %>%
  filter(country_of_origin == "France")

# Group by year, party, and sum the contributions
summary_table_france <- france_contributions %>%
  group_by(year, party) %>% 
  summarise(total_amount = sum(amount), .groups = 'drop')
```

``` {r Plot the data}

ggplot(summary_table_france, aes(x = year, y = total_amount)) +
  geom_line(aes(color = party), linewidth = .95) +
  theme_minimal() +
  labs(
    x = "Year", y = "Total amount",  linetype = NULL,
    color = "Party",
    title = "Contibutions to US political parties from France-connected PACs",
    caption = "Source: OpenSecrets.org"
  ) +
  scale_color_manual(
    values = c("blue", "red"),
    labels = c("Democrat", "Republican")
  ) +
  coord_cartesian(clip = "off") +
  theme(
    legend.position = c(0.9, 0.15),
    axis.title.x = element_text(hjust = 0),
    axis.title.y = element_text(hjust = 0)
  ) +
  scale_y_continuous(
    labels = scales::dollar_format(scale = 1e-6, prefix = "$", suffix = "M"),
  ) 
```
Shown above, a line plot visualizes the contributions made by France-connected PACs to US political parties over time, with a distinction between Democratic (indicated by the blue line) and Republican (indicated by the red line) contributions. The lines should show the trends and variations in contributions over the years, making it easier to understand the financial support these parties receive from such PACs. According to the line plot, France showed a massive increase in financial contributions in the year 2016 with almost $1 million in contributions, however decreased rapidly by the year 2022. However, support for the Democrat party remains in the $.4 to $.6 million dollar amount following the year 2008. 

## 3 - Hop on

```{r}
#| label: Flight Data

# Load necessary libraries
library(dplyr)

# Load the datasets
rdu_flights <- read.csv("data/rdu-flights-2020.csv")
rdu_planes <- read.csv("data/rdu-planes-2020.csv")

# Perform an inner join using 'tailnum' as the key
rdu_flights_planes <- inner_join(rdu_flights, rdu_planes, by = "tailnum")

# Report the number of rows and columns in the resulting dataset
dim(rdu_flights_planes)

rdu_flights_planes |>
  glimpse()

# Results indicate that there are 32533 rows and 27 columns
# Define cutoffs for categorizing plane sizes based on seat capacity
summary(rdu_flights_planes$seats)
#plotting a histogram
ggplot(rdu_flights_planes,aes(x=seats))+
  geom_histogram()

# Create the 'size' variable based on seat capacity
rdu_flights_planes_new<- rdu_flights_planes |>
  mutate(size=case_when(seats<=50~"Small",
                        seats>50 & seats<=110~"Medium",
                        seats>110 & seats<=200~"Large",
                        seats>200~"Jumbo"))
```
Justification: The reasons for these numbers is due to the histogram and how the data points were distributed. Based on the histogram, there seemed to be four separate segments within the histogram so I used that to inform my decision. Additionally, I used this article to inform how many seats would be in certain planes. https://aerocorner.com/blog/types-of-airplanes/

```{r}
#|label: Recreating plot in HW assignment
# Glimpse of the 'size' variable
rdu_flights_planes_new |>
  glimpse()

#install packages
install.packages("ragg")
dev = "ragg_png"

install.packages("devtools")
devtools::install_github("hadley/emo")

#Recreate plot
# Load necessary libraries
library(ggplot2)
library(emo)
library(dplyr)


# Create the plot with emojis
rdu_flights_planes_new|>
  group_by(size)|>
  count()|>

ggplot(aes(x=size,y=n))+
  geom_segment(aes(xend=size,yend=0),color="lightblue",linewidth=1)+
  geom_text(aes(label ="✈️"), size = c(16,12,8,4), show.legend = FALSE)+    #flight emoji label found here:     https://symbl.cc/en/2708/
  labs(x="Plane size",
       y="Number of flights",
       title="Number of flights out of RDU in 2020",
       subtitle="By size of plane",
       caption="Source: FAA Aircraft Registry and \nBureau of Transportation Statistics")+
  coord_flip()+
  scale_x_discrete(limits=rev)

```

```{r}
#|label: Scatterplot to compare flight delays by manufacturer and plane size
ggplot(rdu_flights_planes_new, aes(x = manufacturer, y = arr_delay)) +
  geom_point(aes(color = manufacturer), alpha = 0.7) +
  facet_wrap(~size) +
  labs(
    x = "Manufacturer",
    y = "Departure Delay (minutes)",
    title = "Flight Delays by Manufacturer and Plane Size",
    subtitle = "Color represents manufacturer",
    caption = "Source: FAA Aircraft Registry and \nBureau of Transportation Statistic"
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.title = element_blank()
  )

```
Overall, this scatterplot provides a visual summary of departure delay patterns for different plane sizes and allows you to compare how different manufacturers perform in terms of on-time departures or delays. It can be used to identify trends and patterns that may be of interest to aviation professionals, airlines, or researchers studying flight operations.The plot is divided into facets, each representing a specific plane size category (e.g., Small, Medium, Large, Jumbo).This separation allows us to analyze the data for different plane sizes independently.

## 4 - Expect More. Plot More.
```{r}
#| label: Recreating the target logo

# Create a dataset with coordinates and sizes for the circles
library(ggplot2)
library(tibble)

# Create a sequence of degrees
degree <- seq(0, 360)

# Create a tibble of a circle of radius 3
circle <- tibble(
  x = 3 * sin(degree),
  y = 3 * cos(degree) - 2
)

# Create the plot using geom_path and geom_line
ggplot(circle, aes(x, y)) +
  geom_path(
    color = "#E82118",
    size = 8,
    lineend = "round",
    linejoin = "round"
  ) +
  geom_line(
    aes(x / 3, (y / 3) - 1.25),
    color = "#E82118",
    linewidth = 2,
    lineend = "round",
    linejoin = "round"
  ) +
  annotate(
    geom = "text",
    x = 0.5,
    y = -7,
    label = expression(bold("TARGET")["\u00AE"]),
    color = "#E82118",
    size = 8
  ) +
  theme_void() +
  coord_fixed() +
  xlim(-10, 10) +
  ylim(-8, 3) +
  theme(
    plot.background = element_rect(fill = "white"),
    panel.background = element_rect(fill = "white"),
    axis.line = element_blank(),
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    legend.position = "none"
  )

```
Approach: I used the ggplot2 library in R to create a target logo. First, I generated a circular shape by calculating 'x' and 'y' coordinates based on degrees. My first step was to generate a sequence of degrees ranging from 0 to 360. This sequence served as the foundation for defining the circular shape of the logo. Then, I created a tibble named 'circle,' which represented the outer circle of the target logo. In this tibble, the 'x' and 'y' columns were calculated based on the sine and cosine of the degree values, respectively. These calculations resulted in the circular shape.Then, I added red outer and inner circles using 'geom_path()' and 'geom_line()', respectively. 'geom_path()' created the outer red circle. 'Geom_line()' was responsible for crafting the inner red circle. Adjusted the measurements so it was centered. 
## 5 - Mirror, mirror on the wall, who’s the ugliest of them all?
```{r}
#|label: Ugly Penguin Plot

# Load necessary libraries
library(ggplot2)
library(palmerpenguins)

# Create a plot using the default theme and color scales
basic_plot <- ggplot(penguins, aes(x = species, y = bill_length_mm, fill = sex)) +
  geom_boxplot() +
  labs(
    title = "Bill Length by Species and Sex",
    x = "Species",
    y = "Bill Length (mm)"
  )

basic_plot <- basic_plot + theme_gray()

# Display the basic plot
print(basic_plot)

# Create an intentionally ugly plot
ugly_plot <- basic_plot +
  theme(
    # Change background color to neon yellow
    plot.background = element_rect(fill = "yellow"),
    
    # Change plot title font size and color
    plot.title = element_text(size = 30, color = "purple"),
    
    # Change axis labels to Comic Sans font
    axis.text = element_text(size = 15, family = "Comic Sans MS"),
  )

# Print ugly plot
print(ugly_plot)


```
