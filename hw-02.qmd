---
title: "HW 02"
author: "Megan Hokama"
format: 
  html:
    embed-resources: true
toc: true
---
```{r}
#| label: Set up environment
# Load and install necessary libraries

if(!require(pacman))
  install.packages("pacman")

pacman::p_load(tidyverse,
               ggridges,
               dsbox,
               dplyr,
               janitor)
pacman::p_load_gh("rstudio-education/dsbox")
library(RColorBrewer)

# set theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))

# set width of code output
options(width = 65)

# set figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 7, # 7" width
  fig.asp = 0.618, # the golden ratio
  fig.retina = 3, # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 300 # higher dpi, sharper image
)


```


## 1 - A new day, a new plot, a new geom

```{r}
#| label: Create ridgeline plot with Airbnb ratings and Edinburgh neighborhoods

#load data and use glimpse to overview the data
edibnb |>
  glimpse()     

# Remove rows with NA values
edibnb <- na.omit(edibnb)

#Calculate the median review and order
median_scores <- edibnb %>%
  group_by(neighbourhood) %>%
  summarize(median_score = median(review_scores_rating)) %>%
  arrange(desc(median_score))

# Reorder the neighborhoods based on median scores
edibnb$neighbourhood <- factor(edibnb$neighbourhood, levels = median_scores$neighbourhood)

#create ridgeplot referencing https://wilkelab.org/ggridges/
ggplot(edibnb, aes(x = review_scores_rating, y = neighbourhood, fill = neighbourhood)) +
  geom_density_ridges() + 
  scale_fill_brewer(palette = "Paired") + #colorblind-friendly palette with the most color options
  labs(title = "Airbnb Review Scores in Edinburgh Neighborhoods",
       subtitle = "Neighbourhoods Ordered by Median Review Scores",
       x = "Review Score",
       y = "Neighbourhood") +
  theme_minimal() +
  guides(fill = "none") #Remove the legend as it is redundant information

#Joint Bandwidth = 1.22
#Interpretation: In this ridgeplot, we are able to see the Airbnb review scores in Edinburgh Neighborhood. The vertical position of the ridges on the y-axis indicates the ordering of neighborhoods by their median review scores. Neighborhoods at the top have higher median review scores, while those at the bottom have lower median review scores.The width and shape of each ridge represent the density of review scores in that neighborhood. Wider ridges indicate higher density of review scores in a particular range, while narrower ridges indicate lower density.

```

## 2 - Foreign Connected PACs

```{r}
#| label: label-me-2

#Load packages again
pacman::p_load(tidyverse, 
               openintro, 
               ggplot2, 
               here, 
               devtools, 
               dsbox, 
               ggridges, 
               dplyr, 
               fs, 
               janitor, 
               tidyr)

# get a list of files with "Foreign Connected PAC" in their names
list_of_files <- dir_ls(path = "data", regexp = "Foreign Connected PAC")

# read all files and row bind them
# keeping track of the file name in a new column called year
pac <- read_csv(list_of_files, id = "year", show_col_types = F)

#clean data
pac <- pac %>%
  clean_names()

pac|>
  glimpse() #Making sure to look at the data variables for next portion

#extracting year
pac$year<-substr(pac$year,nchar(pac$year)-8+1,nchar(pac$year)-4)
pac$year=as.integer(pac$year)

#Then, pivot the data longer such that instead of dems and repubs columns you have a column called party with levels: Democrat and Republican and another column called amount that contains the amount of contribution.
pac_long <- pac %>%
  pivot_longer( #pivot columns into a longer format
    cols = c(dems, repubs),
    names_to = "party",  #Name the new column to "party"
    values_to = "amount" #Name of the column with contribution amount
  ) %>%
  mutate(
    party = ifelse(party == "dems", "Democrat", "Republican")  # Rename 'dems' to 'Democrat' and 'repubs' to 'Republican'
  )

# Display the first few rows of the pivoted data to check if columns were created
head(pac_long)

#splitting into country of origin and parent company
pac_long<- pac_long|>
  separate(country_of_origin_parent_company,into=c("country_of_origin","parent_company"),sep="/",convert=T)

# Filter the data for PACs with country_of_origin as UK
uk_contributions <- pac_long %>%
  filter(country_of_origin == "UK")

# Group by year, party, and sum the contributions/HAVING TROUBLE!
summary_table <- uk_contributions %>%
  group_by(party, year) %>% 
  summarize(total_contribution = sum(uk_contributions$amount))



```

## 3 - Hop on


## 4 - Expect More. Plot More.


## 5 - Mirror, mirror on the wall, whoâ€™s the ugliest of them all?
